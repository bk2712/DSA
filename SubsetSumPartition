bool sol(vector<int> &nums,int ind,int tar,int n,vector<vector<int>> &dp){
    if(ind>=n) return false;
    if(tar==0) return true;
    if(ind==n-1) return tar==nums[ind];
    if(dp[ind][tar]!=-1) return dp[ind][tar];
    bool take= false;
    if(nums[ind]<=tar) take= sol(nums,ind+1,tar-nums[ind],n,dp);
    bool nottake= sol(nums,ind+1,tar,n,dp);
    return dp[ind][tar]= take|nottake;
}
    bool canPartition(vector<int>& nums) {
        int n= nums.size();
        int sum= 0;
        for(int i=0;i<n;i++) sum+= nums[i];
        if(sum%2!=0) return false;
        cout<<sum<<" ";
        vector<vector<int>> dp(n,vector<int> (sum/2+1,-1));
        return sol(nums,0,sum/2,n,dp);
    }
