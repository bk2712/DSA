long long maximumSubarraySum(vector<int>& nums, int k) {
        int i=0,n= nums.size(),j=0;
        long long sum=0,ans= 0;
        unordered_map<int,int> mp;
        while(i<n){
            sum+= nums[i];
            mp[nums[i]]++;
            while(mp[nums[i]]>1){
                // if(i-j+1==k) ans= max(ans,sum);
                mp[nums[j]]--;
                sum-= nums[j];
                if(mp[nums[j]]==0) mp.erase(nums[j]);
                j++;
            }
            if(i-j+1==k){
                cout<<sum<<" "<<i<<" "<<j<<" ";
                ans= max(ans, sum);
                sum-= nums[j];
                mp[nums[j]]--;
                if(mp[nums[j]]==0) mp.erase(nums[j]);
                j++;

            }
            i++;
        }
        return ans;
    }
