#include <iostream>
#include<bits/stdc++.h>

using namespace std;

struct TreeNode{
    TreeNode* left, * right;
    int data;
    TreeNode(int val){
        data= val;
        left= NULL;
        right= NULL;
    }
};

TreeNode* createTree(TreeNode* root, int val){
    if(!root) return new TreeNode(val);
    if(root->data > val) root->left= createTree(root->left,val);
    else root->right= createTree(root->right,val);
    return root;
}

void inorder(TreeNode* root){
    if(!root) return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

TreeNode* find(TreeNode* root){
    if(!root->right) return root;
    return find(root->right);
}

TreeNode* helper(TreeNode* root){
    if(!root->left) return root->right;
    if(!root->right) return root->left;
    TreeNode* rightchild= root->right;
    TreeNode* leftchild= find(root->left);
    leftchild->right= rightchild;
    return root->left;

}

TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(root->data==key) return helper(root);
        TreeNode* parent= NULL;
        TreeNode* dummy= root;
        while(root){
            if(root->data > key){
                if(root->left && root->left->data==key){
                    root->left= helper(root->left);
                    break;
                }else root= root->left;
            }else{
                if(root->right && root->right->data==key){
                    root->right= helper(root->right);
                    break;
                }else root= root->right;
            }
        }
        return dummy;
}

int main()
{
    TreeNode* root= NULL;
    root= createTree(root,5);
    createTree(root,3);
    createTree(root,6);
    createTree(root,8);
    createTree(root,1);
    createTree(root,4);
    deleteNode(root,6);
    inorder(root);
}

